#!/bin/bash

###############################################################################
# Shellscript : hb.sh - Batch-encoder script for HandBrakeCLI
# Author      : Snorre Selmer <snorre.selmer@gmail.you-know-the-rest>
# Date        : 2008-10-23
# Requires    : HandBrakeCLI, awk, sed
###############################################################################
# Description:
# This script does recursive scanning of a given folder and encodes all titles
# that are within an optionally given minimum and maximum length, and outputs
# the resulting files into an optionally given folder.
###############################################################################
# Cudos:
# - First of all, big thanks to the HandBrake team for making the most awesome
#   MP4-encoder I've ever used.
# - Second thanks goes to the HandBrake CLI-forum (http://forum.handbrake.fr)
#   and especially ronnor for making the script I used as a base for this one.
#   I learned a lot from "disassembling" your script.
# - The SED and AWK tutorials at http://www.grymoire.com/Unix/index.html were
#   a great help in understanding ronnor's script.
# - Finally, http://www.shelldorado.com/goodcoding/cmdargs.html is where I
#   got the code for the commandline arguments. Excellent shell-script site!
###############################################################################
# Disclaimer:
# I give no guarantees that this script will work on your system. It works on
# mine (GNU/Linux Ubuntu 8.04 x86_64 with HandBrakeCLI svn1667) and that's the
# only place I've been able to test it so far. If you find a bug, let me know
# on the HandBrake forum at http://forum.handbrake.fr/viewtopic.php?f=10&t=5070
# and we can look at it.
# DO NOT E-MAIL ME BUGS! Bugs are best squashed when many can look at them,
# so use the forum!
###############################################################################
# Todo:
# - Find and eliminate the cause of the "Segmentation fault" errors
# - Sort out a command-line argument to enable deinterlacing
# - Sort out a command-line argument to select presets
# - Space for sale, user-input required
###############################################################################

#basic program-info stuff
name=`basename "$0"`
version='0.4'

#path to the HandBrakeCLI binary
CLIpath=/Users/johnw/bin/HandBrakeCLI

#default minimum title-time (in minutes) to encode
longerthan=0

#default maximum title-time (in minutes) to encode (default = 24 hours)
shorterthan=1440

#the folder you want to scan for DVDs to encode
input=

#the folder you want to store the encoded files in (default is the folder you're in when you run the script)
output=.

#title-duration check-flag
check="n"

#function that prints usage-instructions if the user input something wrong
Usage () {
   echo >&2 "$name - HandBrakeCLI batch-script, v$version
usage: $name -i PathToDVDs [-o PathToSaveFolder] [-l MinimumTitleTimeToEncode] [-s MaximumTitleTimeToEncode]
    -i:  path to scan for VIDEO_TS folders.
    -o:  path to where you want to store the finished encodes.
           Default: the current folder (./)
    -l:  only encode titles that are longer than this (in minutes).
           Ex: \"-i 30\" will only encode titles longer than 30 minutes.
           Can be used in conjunction with -s.
    -s:  only encode titles that are shorter than this (in minutes).
           Ex: \"-s 30\" will only encode titles shorter than 30 minutes.
           Can be used in conjunction with -l.
    -c:  scans the input-path, checks and prints out the length of the titles (in minutes).
           Can be used with -l and -s, but -o has no meaning.

Example:
$name -l 30 -s 60 -i Scrubs -o /home/username/mp4

This will scan the subfolder Scrubs and encode all titles that are longer than
30 minutes and shorter than 60 minutes, and store them in /home/username/mp4.

Input- and output-paths can be either relative or absolute (ie. Scrubs, ../Scrubs or /path/to/Scrubs).
"
   exit 0
}

BadArg() {
   echo >&2 "Invalid argument.
Try \"$0 -h\" for more information"
   exit 0
}

#command-line argument parser
while [ $# -gt 0 ]
do
   case "$1" in
   -i)   input="$2"; shift;;
   -o)   output="$2"; shift;;
   -l)   longerthan="$2"; shift;;
   -s)   shorterthan="$2"; shift;;
   -h)   Usage;;
   -c)   check="y";;
   -*)   BadArg;;
   esac
   shift
done

#test to make sure the user gave an input-path (the minimum required to successfully run the script)
if [ "${input}" = "" ]
   then echo "This script requires that you atleast give it an input-path.
Try \"$0 -h\" for more information"
   exit 0
fi

export longerthan
export shorterthan

#scans the input-path for VIDEO_TS folders
find "$input" -type f \( -name '*.avi' -o -name '*.AVI' -o -name '*.mpg' -o -name '*.MPG'  \) \
| while read i
do

#this names the filenameafter it's parent folder
   filename=$(basename "$i" | sed 's/\.[^.]*$//')
   directory=$(dirname "$i")

   echo $i '=>' "${directory}/${filename}.m4v"
   zsh -c "$CLIpath -C 16 -q 0.8 -i '$i' -o '${directory}/${filename}.m4v' -Z 'iPhone / iPod Touch' --deinterlace='2' -r 23.976" &
   wait
done
