#!/usr/bin/env python3
#
# getphotos, version 1.3, by John Wiegley <johnw@newartisans.com>
#
# Download photos from a photo card or camera, while renaming and doing other
# house-keeping tasks at the same time.

import sys
import string
import re
import os
import time
import shutil
import hashlib
import logging
import logging.handlers

from stat import *
from os.path import *

#from PIL import Image
#from PIL.ExifTags import TAGS

def get_exif_capture_date(fn):
    #try:
    #    i = Image.open(fn)
    #    info = i._getexif()
    #    if info:
    #        keys = {}
    #        for tag, value in info.items():
    #            decoded = TAGS.get(tag, tag)
    #            keys[decode] = value
    #
    #        if 'DateTimeOriginal' in keys:
    #            return time.strptime(keys['DateTimeOriginal'], '%Y:%m:%d %H:%M:%S')
    #        if 'DateTime' in keys:
    #            return time.strptime(keys['DateTime'], '%Y:%m:%d %H:%M:%S')
    #except:
    #    pass

    with os.popen("exiv2 -q \"%s\"" % fn) as fd:
        for line in fd.readlines():
            match = re.match("^Image timestamp : (.+)", line)
            if match:
                try:
                    return time.strptime(match.group(1), '%Y:%m:%d %H:%M:%S')
                except ValueError:
                    pass

    return None

image_regexp = "(([0-9]{6})_([0-9]{4}))[^.]*\.(jpe?g|cr[w2]|psd|[pd]ng|webp|heic|gif|mov|tiff?)(\.dxo)?$"

dates = {}

def initialize_dates(path):
    global dates
    for entry in sorted(os.listdir(path)):
        base = entry
        entry = join(path, entry)
        if islink(entry) or isfile(entry):
            match = re.match(image_regexp, base, re.IGNORECASE)
            if match:
                name = match.group(1)
                date = match.group(2)
                code = int(match.group(3)) + 1
                if not date in dates or dates[date] < code:
                    dates[date] = code
        elif isdir(entry) \
             and not base == '.Trashes' \
             and not base == '.Spotlight-V100' \
             and not base == '.fseventsd':
            initialize_dates(entry)

def delete_file(path):
    if debug:
        log.debug("rm " + path)
    else:
        os.unlink(path)

def copy_file(from_path, to_path):
    if debug:
        log.debug("cp " + from_path + " " + to_path)
    else:
        shutil.copy2(from_path, to_path)

def move_file(from_path, to_path):
    if debug:
        log.debug("mv " + from_path + " " + to_path)
    else:
        shutil.move(from_path, to_path)

def make_directory(path):
    if debug:
        log.debug("mkdir " + path)
    else:
        os.makedirs(path)

def remove_directory(path):
    if debug:
        log.debug("rmdir " + path)
    else:
        os.rmdir(path)

entry_list = []

def collect_images(path):
    entries = os.listdir(path)
    for entry in entries:
        entry = join(path, entry)
        print(entry)
        if islink(entry) or isfile(entry):
            if re.search("\.(jpe?g|tiff?|[dp]ng|webp|heic|mov|gif|cr[w2])$", entry, re.IGNORECASE):
                mtime = get_exif_capture_date(entry)
                if not mtime:
                    log.error("Ignoring image with no capture date: " + entry)
                else:
                    global entry_list
                    entry_list.append((mtime, entry))
            elif re.search("\.thm$", entry, re.IGNORECASE):
                if not readonly:
                    delete_file(entry)
        elif isdir(entry):
            collect_images(entry)

def prune_dirs(path):
    entries = os.listdir(path)
    if entries:
        recursed = 0
        for entry in entries:
            entry = join(path, entry)
            if isdir(entry):
                prune_dirs(entry)
                recursed = 1
        if recursed:
            entries = os.listdir(path)

    if not entries:
        log.info("- %s" % path)
        remove_directory(path)

registry = {}

def move_image(fn, mtime, path, readonly):
    root = splitext(fn)[0].lower()
    root = re.sub('_1$', '', root)

    ext = splitext(fn)[1].lower()
    ext = re.sub('jpeg', 'jpg', ext)
    ext = re.sub('tiff', 'tif', ext)

    global registry
    if root in registry:
        base = "%s%s" % (registry[root], ext)
    else:
        global dates

        date = time.strftime("%y%m%d", mtime)
        if not date in dates:
            dates[date] = 1

        serial = dates[date]
        base = "%s_%04d%s" % (date, serial, ext)
        if len (args) > 0:
            base = join(args[0], base)
        serial += 1
        dates[date] = serial

        registry[root] = splitext(base)[0]

    if base != basename(fn):
        log.warn(fn + " should be named " + base)

    dest = join(path, base)

    if not isdir(dirname(dest)):
        log.info("+ %s" % dirname(dest))
        if not readonly:
            make_directory(dirname(dest))

    log.info("%s -> %s" % (basename(fn), dest))

    if isdir(dirname(dest)):
        if isfile(dest):
            log.info("would overwrite %s!" % (dest,))

        if not readonly:
            move_file(fn, dest)

        if debug:
            log.debug("chmod 400 " + dest)
        if not readonly:
            os.chmod(dest, 0o0400)

########################################################################

formatter = logging.Formatter("%(name)s: %(levelname)s: %(message)s")
ch = logging.StreamHandler()
ch.setFormatter(formatter)

log = logging.getLogger(os.path.basename(sys.argv[0]))
log.addHandler(ch)
log.setLevel(logging.INFO)

args = sys.argv[1 :]
debug = False
readonly = False

if len(args) > 0 and args[0] == "-n":
    log.info("Activating readonly mode")
    readonly = True
    args = args[1 :]
if len(args) > 0 and args[0] == "-d":
    log.setLevel(logging.DEBUG)
    log.info("Activating debug mode")
    debug = True
    args = args[1 :]

# These are all the possible names of the source volumes, after they have been
# mounted.
cards = [ "/Volumes/EOS_DIGITAL" ]

# A single source directory can be added via the command line.
if len(args) > 0 and isdir(args[0]):
    cards.append(args[0])
    args = args[1 :]

# These is the directory to copy pictures to.
if len(args) > 0 and isdir(args[0]):
    baseline = args[0]
    target = args[0]
    args = args[1 :]
else:
    baseline = "/Users/johnw/Photos"
    target = "/Users/johnw/Photos/Imported"

if isdir(baseline):
    initialize_dates(baseline)
elif debug:
    log.error("Could not find target path \"%s\"" % baseline)

for volume in cards:
    if isdir(volume):
        collect_images(volume)
    elif len(cards) == 1:
        log.warn("Could not find card volume \"%s\"" % volume)

for entry in sorted(entry_list):
    move_image(entry[1], entry[0], target, readonly)

for volume in cards:
    if isdir(volume):
        if not readonly:
            prune_dirs(volume)
        if not debug and exists("/usr/sbin/diskutil") and \
           re.search("Volumes", volume):
            os.system("diskutil eject \"%s\"" % volume)
