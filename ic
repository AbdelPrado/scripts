#!/bin/bash

set -e

PRINCIPAL=$(pass show IC/principal | head -1)
ACCOUNT=$(pass show IC/account | head -1)
KEY_PATH=$(pass show IC/key-path | head -1)

SIX_MONTHS=15778800

function do_quill_without_send() {
    echo "$@"
    gpg --decrypt $KEY_PATH | quill --pem-file - "$@"
}

function do_quill() {
    echo "> quill $@"
    yes | quill send <(gpg --decrypt $KEY_PATH | quill --pem-file - "$@")
}

function to_json() {
    $@ | perl -ne 's/^Response: //; print if /^\(/ .. /^\)/'     \
       | idl2json
}

function get_neuron_id_from() {
    perl -ne \
        'if (/(?:created_neuron_id|NeuronId) = (?:opt )?record { id = ([0-9_]+) }/) {
             my $var = $1;
             $var =~ s/_//g;
             print $var, "\n";
         } ' $1
}

function get_neuron_id() {
    case "$1" in
        8y) echo $(pass show IC/8-year-neuron | head -1) ;;
        6m) echo $(pass show IC/8-month-neuron | head -1) ;;
        *)  echo "$1" ;;
    esac
}

function get_neuron_name() {
    case "$1" in
        8y) echo "1" ;;
        6m) echo "2" ;;
        *)  echo "$1" ;;
    esac
}

COMMAND=$1
shift 1

if [[ "$COMMAND" != balance &&
      "$COMMAND" != neuron-info &&
      "$COMMAND" != test &&
      "$COMMAND" != bal &&
      "$COMMAND" != reg &&
      ! -f $KEY_PATH ]]; then
    echo "Please insert secure USB device containing the private key."
    exit 1
fi

case "$COMMAND" in
    test_parse)
        NEURON_ID=$(get_neuron_id_from $1)
        echo $NEURON_ID
        ;;

    ids)
        do_quill_without_send public-ids
        ;;

    bal)
        PAGER=cat ledger -f ~/doc/accounts/broker/icp.ledger bal Assets Liabilities Income
        ;;

    reg)
        PAGER=cat ledger -f ~/doc/accounts/broker/icp.ledger reg Assets Liabilities Income
        ;;

    balance)
        to_json quill account-balance ${1:-$ACCOUNT}    \
            | jq -r '((.e8s | tonumber) / 100000000)'
        ;;

    disburse)
        if [[ -z "$1" ]]; then
            echo "usage: ic disburse <neuron_id>"
            exit 1
        fi
        do_quill neuron-manage $1 --disburse
        ;;

    spawn)
        do_quill neuron-manage $(get_neuron_id ${1:-8y}) --spawn > /tmp/result.$$
        NEURON_ID=$(get_neuron_id_from /tmp/result.$$)
        do_quill neuron-manage $NEURON_ID --start-dissolving
        ;;

    dissolve)
        if [[ -z "$1" ]]; then
            echo "usage: ic dissolve <neuron_id>"
            exit 1
        fi
        do_quill neuron-manage $1 --start-dissolving
        ;;

    transfer)
        if [[ -z "$1" ]]; then
            echo "usage: ic transfer <to_account> <amount>"
            exit 1
        fi
        do_quill transfer $1 --amount $2
        ;;

    stake)
        if [[ -z "$1" ]]; then
            echo "usage: ic stake <name> <amount> [dissolve_delay]"
            exit 1
        fi
        do_quill neuron-stake --name $1 --amount $2 > /tmp/result.$$
        NEURON_ID=$(get_neuron_id_from /tmp/result.$$)
        do_quill neuron-manage $NEURON_ID --additional-dissolve-delay-seconds ${3:-$SIX_MONTHS}
        ;;

    topup)
        if [[ -z "$1" ]]; then
            echo "usage: ic topup <amount> [name]"
            exit 1
        fi
        do_quill neuron-stake --amount $1 --name $(get_neuron_name ${2:-6m})
        ;;

    hotkey)
        if [[ -z "$1" ]]; then
            echo "usage: ic hotkey <neuron_id> [principal_id]"
            exit 1
        fi
        do_quill neuron-manage $(get_neuron_id ${1:-8y}) --add-hot-key ${2:-$PRINCIPAL}
        ;;

    compound)
        do_quill neuron-manage $(get_neuron_id ${1:-6m}) --merge-maturity ${2:-100}
        ;;

    friday-spawn)
        if [[ -z "$1" ]]; then
            echo "usage: ic friday <last_week_neuron_id>"
            echo "NOTE: must be run after last week's neuron is dissolved"
            exit 1
        fi
        set -x

        # Spawn this week's reward
        $0 spawn 8y
        $0 compound 6m
        $0 disburse $1
        ;;

    friday-topup)
        AMOUNT=$(echo "scale=8; ($($0 balance | awk '{print $1}') - 0.0001)" | bc)
        $0 topup $AMOUNT $(get_neuron_name 6m)
        ;;

    friday)
        if [[ -z "$1" ]]; then
            echo "usage: ic friday <last_week_neuron_id>"
            echo "NOTE: must be run after last week's neuron is dissolved"
            exit 1
        fi
        set -x

        # Spawn this week's reward
        $0 maturity
        $0 balance

        $0 friday-spawn

        # Topup the 6-month neuron with last week's reward
        echo "Giving the network time to catch up (though not needed)"
        sleep 10

        $0 friday-topup

        $0 maturity
        $0 balance
        ;;

    test)
        ;;

    list-neurons)
        do_quill list-neurons $*                                        \
            | perl -ne 's/^Response: //; print if /^\($/ .. /^\)$/'     \
            | idl2json                                                  \
            | jq -r '
              .full_neurons
            | map(select(.cached_neuron_stake_e8s != "0"))
            | map( del(.recent_ballots)
                 | del(.transfer)
                 | del(.account)
                 | del(.followees)
                 )
        '
        ;;

    maturity)
        $0 list-neurons $* | jq '
              .[]
            | { id:       .id[0].id
              , stake:    ((.cached_neuron_stake_e8s | tonumber) / 100000000)
              , maturity: ((.maturity_e8s_equivalent | tonumber) / 100000000)
              }
        '
        ;;

    *)
        echo "usage: ic <command> [args]"
        exit 1
        ;;
esac
