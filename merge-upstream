#!/bin/bash -x

BRANCHES=$HOME/Contracts/Embarcadero/Projects/llvm/branches
PRODUCTS=$HOME/Products/llvm
LOG=$HOME/Library/Logs/merge.log

error() {
    export GIT_DIR=$BRANCHES/merge/tools/clang/.git
    for addr in 'johnw@boostpro.com' 'dave@boostpro.com'; do
        cat <<EOF > /tmp/report.txt
From: johnw@boostpro.com
To: $addr
Subject: [embt] $2

Upstream merge FAILED: upstream $(git rev-parse origin/upstream | cut -c 1-9) + origin/work $(git rev-parse origin/work | cut -c 1-9)

Hmm, it failed (got as far as line $1 of merge-upstream).  The output:

EOF
        cat $LOG >> /tmp/report.txt
        msmtp --from=johnw@boostpro.com "$addr" < /tmp/report.txt
        rm -f /tmp/report.txt
    done
}

log()
{
    echo "$@" >> $LOG 2>&1
}

quiet() {
    #trap 'error ${LINENO}' ERR

    if ! "$@" > /tmp/output.$$ 2>&1; then
        echo "Command failed: $@" >> $LOG
        cat /tmp/output.$$ >> $LOG
    fi
    rm -f /tmp/output.$$
}

update() {
    #trap 'error ${LINENO}' ERR

    git remote update

    if [[ "$1" == "--pull" ]]; then
        git pull
        git submodule update --init
    elif [[ "$1" == "--reset" ]]; then
        git clean -qfx
        git reset -q --hard HEAD
        git checkout -q -f $2
        git reset -q --hard origin/$2
    fi
}

merge() {
    #trap 'error ${LINENO}' ERR

    git checkout -q -f $1
    git reset -q --hard HEAD
    git merge $2
}

run() {
    #trap 'error ${LINENO}' ERR

    cd $SOURCE;     "$@"
    cd tools/clang; "$@"
}

rm -f $LOG

if [[ "$1" != --merge-only ]]; then
    for branch in $PRODUCTS/*; do
        if [[ ! -d $branch ]]; then continue; fi

        BASE=$(basename $branch)
        SOURCE=$BRANCHES/$BASE

        if [[ ! -d $SOURCE ]]; then continue; fi
        if [[ $BASE == main ]]; then continue; fi
        if [[ $BASE == test ]]; then continue; fi
        if [[ $BASE == merge ]]; then continue; fi

        log ========================================================================
        log Building $branch on $(date)
        log ========================================================================

        if [[ $BASE == 'svn' ]]; then
            run svn update >> $LOG 2>&1
        elif [[ $BASE == 'git-svn' ]]; then
            run git svn fetch >> $LOG 2>&1
            run git svn rebase >> $LOG 2>&1
        elif [[ $BASE != 'topics' && $BASE != 'union' ]]; then
            run update --pull >> $LOG 2>&1
        else
            run update >> $LOG 2>&1
        fi

        if [[ $BASE == 'topics' ]]; then
            REFS=$SOURCE/tools/clang/.git/refs/heads

            for topic in $(cd $REFS/t; find . -type f | sed 's/\.\///') ; do
                log ========================================================================
                log Building topic $topic on $(date)
                log ========================================================================

                git checkout -f t/$topic >> $LOG 2>&1
                (cd $branch && quiet-clang-build --tests -j16 >> $LOG 2>&1)
            done
        else
            (cd $branch && quiet-clang-build --tests -j16 >> $LOG 2>&1)
        fi
    done
fi

log ========================================================================
log Merging Clang/LLVM on $(date)
log ========================================================================

run_clangup() {
    log ""
    log "### For sanity's sake, checking if current $1 $2 builds..."
    $1 $2 2>&1 | tr -d '\r' | tee ~/Library/Logs/$1-$2.log > /tmp/$1-$2.log
    case $? in
        0)
            log ========================================================================
            log Cannot tell if $1 $2 build succeeded.  Last 100 lines from log:
            log ========================================================================
            cat /tmp/$1-$2.log | tail -100 >> $LOG
            ;;
        1)
            log ========================================================================
            log $1 $2 build FAILED.  Log appended here:
            log ========================================================================
            cat /tmp/$1-$2.log >> $LOG
            log ========================================================================
            log Log ends here.
            log ========================================================================
            ;;
        2)
            log ========================================================================
            log $1 $2 build FAILED to pass tests.  Log appended here:
            log ========================================================================
            cat /tmp/$1-$2.log >> $LOG
            log ========================================================================
            log Log ends here.
            log ========================================================================
            ;;
    esac
    rm -f /tmp/$1-$2.log
}

run_clangup clangup upstream
run_clangup win-clangup upstream_2010
run_clangup win-clangup upstream_2008

run_clangup clangup work
run_clangup win-clangup work_2010
run_clangup win-clangup work_2008

SOURCE=$BRANCHES/merge
PRODUCTS=$PRODUCTS/merge

run git branch -D merged
run git branch -Dr origin/merged
run git push origin :refs/heads/merged

run update --reset work >> $LOG 2>&1

if [[ ! -d $PRODUCTS ]]; then
  mkdir -p $PRODUCTS
  cd $PRODUCTS
fi

log ""
log "Merging origin/upstream $(git rev-parse origin/upstream | cut -c 1-9) into work $(git rev-parse work | cut -c 1-9)"

if ! run merge work origin/upstream >> $LOG 2>&1; then
    error ${LINENO} "Failed to merge; please attempt a local merge"
    exit 1
fi

log ""
log "Building resulting merge"

cd $PRODUCTS
/bin/rm -fr *
cmake -DLLVM_TARGETS_TO_BUILD:=X86 $SOURCE

if ! make-distcc >> $LOG 2>&1; then
    log "=== Merge failed to build ==="

    run git branch -f merged work
    run git push -f origin merged

    error ${LINENO} "Resulting merge failed to build; in branch 'merged'"
    exit 1
fi

# If it builds, push the commits to work now; it may not be passing tests
#run git push >> $LOG 2>&1

log ""
log "Testing resulting merge"

if ! make clang-test >> $LOG 2>&1; then
    log "=== Merge failed to pass tests ==="

    run git branch -f merged work
    run git push -f origin merged

    error ${LINENO} "Resulting merge failed to pass tests; in branch 'merged'"
    exit 1
fi

# If it passes tests, merge it to master
#run git fixws >> $LOG 2>&1
log "Merging new work branch into master"
run merge master work >> $LOG 2>&1

log "Pushing new work and master to remote"
run git push >> $LOG 2>&1

run_clangup win-clangup merge_2010
run_clangup win-clangup merge_2008

mv $LOG $PRODUCTS

export GIT_DIR=$BRANCHES/merge/tools/clang/.git
for addr in 'johnw@boostpro.com' 'dave@boostpro.com'; do
    cat <<EOF > /tmp/report.txt
From: johnw@boostpro.com
To: $addr
Subject: [embt] Upstream merge SUCCESS: work $(git rev-parse work | cut -c 1-9)

Yay, it worked.

EOF
    cat $LOG >> /tmp/report.txt
    msmtp --from=johnw@boostpro.com "$addr" < /tmp/report.txt
    rm -f /tmp/report.txt
done

exit 0

### merge-upstream ends here
