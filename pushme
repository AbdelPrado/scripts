#!/bin/bash

# pushme/pullyou

for proc in imap offlineimap leafnode Emacs; do
    if running $proc; then
        echo WARNING: $proc currently running
        sleep 1
    fi
done

find ~ -maxdepth 1 | while read file; do
    if [[ "$file" != "$HOME/.DS_Store" ]]; then
        file_esc=$(basename "$file" | sed 's/\./\\\\./g')
        if ! grep -q "$file_esc" ~/bin/includes; then
            eval echo "WARNING: $file_esc is not mentioned"
        fi
    fi
done

# Find out which remote machine to copy to
RSYNC='sudo /opt/local/bin/rsync'
FLAGS="$1 -arvXHEyh --inplace --ignore-errors --force-delete"

export RSYNC_SSH="ssh"

if [[ "$1" == lion ]]; then
    shift 1
    REMOTE=lion
else
    find-env > /tmp/env
    source /tmp/env
    rm -f /tmp/env
fi

if [[ $found = false ]]; then
    echo "Could not find remote!"
    exit 1
elif ! ssh $REMOTE true; then
    echo "Error: Could not reach host $REMOTE"
    exit 1
fi

echo "Remote is named $REMOTE"

# Configure the directories to be synchronized
MODE=$(basename "$0")

if [[ $MODE == 'pushme' ]]; then
    SOURCE=''
    TARGET="$REMOTE:"
else
    SOURCE="$REMOTE:"
    TARGET=''
fi

if [[ ( $MODE == 'pushme'  && $laptop == true ) || \
      ( $MODE == 'pullyou' && $laptop == false ) ]]; then

    SHOME=$SOURCE$HOME
    THOME=$TARGET$HOME
    CSOURCE="$SOURCE$HOME/Contracts"
    CTARGET="$TARGET/Volumes"
    PSOURCE="$SOURCE$HOME"
    PTARGET="$TARGET/Volumes/Private"
    RSOURCE="$SOURCE/Volumes/RAID"
    RTARGET="$TARGET$HOME"
    RRSOURCE="$SOURCE/Volumes/RAID"
    RRTARGET="$TARGET/Volumes/Data"

elif [[ $REMOTE == 'lion' ]]; then
    SHOME=$SOURCE$HOME
    THOME=$TARGET$HOME
    CSOURCE="$SOURCE$HOME/Contracts"
    CTARGET="$TARGET$HOME/Contracts"
    PSOURCE="$SOURCE$HOME"
    PTARGET="$TARGET$HOME"
    RSOURCE="$SOURCE/Volumes/RAID"
    RTARGET="$TARGET$HOME"
    #RRSOURCE="$SOURCE/Volumes/RAID"
    #RRTARGET="$TARGET/Volumes/Data"

else
    SHOME=$SOURCE$HOME
    THOME=$TARGET$HOME
    CSOURCE="$SOURCE/Volumes"
    CTARGET="$TARGET$HOME/Contracts"
    PSOURCE="$SOURCE/Volumes/Private"
    PTARGET="$TARGET$HOME"
    RSOURCE="$SOURCE$HOME"
    RTARGET="$TARGET/Volumes/RAID"
    RRSOURCE="$SOURCE/Volumes/Data"
    RRTARGET="$TARGET/Volumes/RAID"
fi

# Synchronize home directories
# Home: ~ <-> ~
echo $SHOME/ '->' $THOME/

volcopy $FLAGS --delete --rsync-path="$RSYNC" \
    --include-from=<(rsync-includes -t small $SHOME < ~/bin/includes) \
    $SHOME/ $THOME/ &

# Home: ~ <-> Private
echo $PSOURCE/ '->' $PTARGET/

volcopy $FLAGS --delete --rsync-path="$RSYNC" \
    --include-from=<(rsync-includes -t private $PSOURCE < ~/bin/includes) \
    $PSOURCE/ $PTARGET/ &

# Home: RAID <-> Data
if [[ -n "$RRTARGET" ]]; then
    echo $RRSOURCE/ '->' $RRTARGET/

    volcopy $FLAGS --delete --rsync-path="$RSYNC" \
        --include-from=<(rsync-includes -t large $RRSOURCE < ~/bin/includes) \
        $RRSOURCE/ $RRTARGET/ &
fi

# Contracts
for contract in BoostPro EDG Embarcadero TI CEG
do
    if ([[ $laptop == true ]] && \
        ssh $REMOTE "mount | grep -q '/Volumes/$contract.*hfs'") || \
       ([[ $laptop == false ]] && \
        mount | grep -q "/Volumes/$contract.*hfs") || \
       [[ $REMOTE == 'lion' ]]
    then
        echo $CSOURCE/$contract/ '->' $CTARGET/$contract/

        volcopy $FLAGS --delete --rsync-path="$RSYNC" \
            --exclude='Backup/' \
            --exclude='Backup.[0-9]/' \
            --exclude=target/ \
            --exclude=MAC/ \
            --exclude=/Machines/ \
            $CSOURCE/$contract/ $CTARGET/$contract/ &
    fi
done

# Synchronize Applications and binaries
if [[ $REMOTE != 'lion' ]]; then
    echo $SOURCE/opt/ '->' $TARGET/opt/

    volcopy $FLAGS --delete --rsync-path="$RSYNC" \
        --exclude=macports.conf \
        --exclude=/local/var/macports/packages/ \
        --exclude=/local/var/cache/pdnsd/ \
        --exclude=/local/var/db/mysql5/ \
        --exclude=/local/var/lib/dovecot/auth-access \
        --exclude=/local/var/run/dovecot/login \
        --exclude=/local/var/run/dovecot/master.pid \
        $SOURCE/opt/ $TARGET/opt/ &

    # stow
    echo $SOURCE/usr/local/ '->' $TARGET/usr/local/

    volcopy $FLAGS --delete --rsync-path="$RSYNC" \
        $SOURCE/usr/local/ $TARGET/usr/local/ &

    # Applications
    echo $SOURCE/Applications/ '->' $TARGET/Applications/

    volcopy $FLAGS --delete --rsync-path="$RSYNC" \
        --include='/MacPorts/' \
        --include='/Misc/' \
        --exclude='/Misc/Dropbox.app/' \
        --exclude='/Misc/Tunnelblick.app/' \
        --exclude='/Misc/ForeverSave 2.app/' \
        --exclude='/Misc/LaunchBar.app/' \
        --exclude=/*/ \
        $SOURCE/Applications/ $TARGET/Applications/ &
else
    # stow
    echo $SOURCE/usr/local/ '->' $TARGET/usr/local/

    volcopy $FLAGS --delete --rsync-path="$RSYNC" \
        --exclude='/stow/emacs-release/' \
        $SOURCE/usr/local/ $TARGET/usr/local/ &

    # Applications
    echo $SOURCE/Applications/ '->' $TARGET/Applications/

    volcopy $FLAGS --delete --rsync-path="$RSYNC" \
        --include='/Misc/' \
        --exclude='/Misc/Emacs.app/' \
        --exclude=/*/ \
        $SOURCE/Applications/ $TARGET/Applications/ &
fi

# Wait for the parallel synchronization tasks to complete
wait

#ssh $CONTROL -O exit $REMOTE

exit 0

### pushme/pullyou ends here
