#!/bin/bash

if [[ -x /Volumes/Passport/Backups/backup.sh ]]; then
    open ~/Archives/Files.sparsebundle
    bash -x /Volumes/Passport/Backups/backup.sh
    diskutil eject /Volumes/Files
fi

smallonly=false
dryrun=false

while getopts 'dns' opt; do
    case $opt in
        n)
            dryrun=true
            shift 1
            ;;
        s)
            smallonly=true
            shift 1
            ;;
        \?)
            echo "Invalid option: -$OPTARG" >&2
            exit 1
            ;;
    esac
done

# Find out which remote machine to copy to
RSYNC='sudo /opt/local/bin/rsync'
FLAGS="$1 -arvXHEyh --inplace --ignore-errors --force-delete"

export RSYNC_SSH="ssh"

if [[ -n "$1" && "$1" != -n ]]; then
    shift 1
    REMOTE=$1
else
    find-env > /tmp/env
    source /tmp/env
    rm -f /tmp/env
fi

if [[ $found = false ]]; then
    echo "Could not find remote!"
    exit 1
elif ! ssh $REMOTE true; then
    echo "Error: Could not reach host $REMOTE"
    exit 1
fi

echo "Remote is named $REMOTE"

# Scan for items which should be synchronized
# pushme/pullyou

for file in $(ls -1a ~); do
    if [[ "$file" != ".DS_Store" && \
          "$file" != "." && "$file" != ".." ]]; then
        file_esc=$(echo "$file" | sed 's/\./\\\\./g')
        if ! grep -q "$file_esc" ~/bin/includes; then
            echo "WARNING: $file is not mentioned"
        fi
    fi
done

ls -1a ~/Library | while read file; do
    if [[ "$file" != ".DS_Store" && \
          "$file" != "." && "$file" != ".." ]] &&
       echo "$file" | grep -qv '^\.'; then
        file_esc=$(echo "$file" | sed -E 's/(\[|\]|\.)/\\\\\1/g')
        if ! grep -q "Library/$file_esc" ~/bin/includes; then
            echo "WARNING: Library/$file is not mentioned"
        fi
    fi
done

ls -1a ~/Library/Application\ Support | while read file; do
    if [[ "$file" != ".DS_Store" && "$file" != "Virtual ][" && \
          "$file" != "." && "$file" != ".." ]] &&
       echo "$file" | grep -qv '^\.'; then
        file_esc=$(echo "$file" | sed -E 's/(\[|\]|\.)/\\\\\1/g')
        if ! grep -q "Library/Application Support/$file_esc" ~/bin/includes; then
            echo "WARNING: Library/Application Support/$file is not mentioned"
        fi
    fi
done

for proc in imap offlineimap leafnode Emacs; do
    if running $proc; then
        echo WARNING: $proc currently running
        sleep 1
    fi
done

if [[ $dryrun == true ]]; then
    exit 0
fi

# Configure the directories to be synchronized
MODE=$(basename "$0")

if [[ $MODE == 'pushme' ]]; then
    SOURCE=''
    TARGET="$REMOTE:"
else
    SOURCE="$REMOTE:"
    TARGET=''
fi

if [[ ( $MODE == 'pushme'  && $laptop == true ) || \
      ( $MODE == 'pullyou' && $laptop == false ) ]]
then
    SHOME=$SOURCE$HOME
    THOME=$TARGET$HOME

    PSOURCE="$SHOME"
    PTARGET="$THOME"

    RRSOURCE="$SOURCE/Volumes/Data"
    RRTARGET="$TARGET/Volumes/Data"

    CSOURCE="$RRSOURCE/Contracts"
    CTARGET="$RRTARGET/Contracts"
else
    SHOME=$SOURCE$HOME
    THOME=$TARGET$HOME

    PSOURCE="$SHOME"
    PTARGET="$THOME"

    RRSOURCE="$SOURCE/Volumes/Data"
    RRTARGET="$TARGET/Volumes/Data"

    CSOURCE="$RRSOURCE/Contracts"
    CTARGET="$RRTARGET/Contracts"
fi

# Synchronize home directories
# Home: ~ <-> ~
echo $SHOME/ '->' $THOME/
volcopy $FLAGS --delete --rsync-path="$RSYNC" \
    --include-from=<(rsync-includes -t small $SHOME < ~/bin/includes) \
    $SHOME/ $THOME/ &

# Home: ~ <-> Private
echo $PSOURCE/ '->' $PTARGET/
volcopy $FLAGS --delete --rsync-path="$RSYNC" \
    --include-from=<(rsync-includes -t private $PSOURCE < ~/bin/includes) \
    $PSOURCE/ $PTARGET/ &

# Home: Data <-> Data
echo $RRSOURCE/ '->' $RRTARGET/
volcopy $FLAGS --delete --rsync-path="$RSYNC" \
    --include-from=<(rsync-includes -t small,private $RRSOURCE < ~/bin/includes) \
    --exclude=/Archives/Games/ --exclude=/Archives/Systems/ \
    $RRSOURCE/ $RRTARGET/ &

if [[ $smallonly == false ]]; then
    # Home: ~ <-> ~
    echo $SHOME/ '->' $THOME/
    volcopy $FLAGS --delete --rsync-path="$RSYNC" \
        --include-from=<(rsync-includes -t large $SHOME < ~/bin/includes) \
        $SHOME/ $THOME/ &

    # Home: Data <-> Data
    echo $RRSOURCE/ '->' $RRTARGET/
    volcopy $FLAGS --delete --rsync-path="$RSYNC" \
        --include-from=<(rsync-includes -t large $RRSOURCE < ~/bin/includes) \
        --exclude=/Archives/Games/ --exclude=/Archives/Systems/ \
        --exclude=/Movies/Cinema/ --exclude='/Movies/TV Shows/' \
        $RRSOURCE/ $RRTARGET/ &
fi

# Contracts
echo $CSOURCE/ '->' $CTARGET/
volcopy $FLAGS --delete --rsync-path="$RSYNC"   \
    --exclude='*.[oda]'                         \
    --exclude='*.mac'                           \
    --exclude='*4[37]0'                         \
    --exclude='Backup.[0-9]/'                   \
    --exclude='Backup/'                         \
    --exclude='armacpia'                        \
    --exclude='armasm'                          \
    --exclude='armcl'                           \
    --exclude='armopt'                          \
    --exclude=MAC/                              \
    --exclude=target/                           \
    $CSOURCE/ $CTARGET/ &

# Synchronize Applications and binaries
# /opt
echo $SOURCE/opt/ '->' $TARGET/opt/
volcopy $FLAGS --delete --rsync-path="$RSYNC"           \
    --exclude=/local/var/cache/pdnsd/                   \
    --exclude=/local/var/db/mysql5/                     \
    --exclude=/local/var/lib/dovecot/auth-access        \
    --exclude=/local/var/macports/build/                \
    --exclude=/local/var/macports/incoming/             \
    --exclude=/local/var/macports/logs/                 \
    --exclude=/local/var/macports/packages/             \
    --exclude=/local/var/run/dovecot/login              \
    --exclude=/local/var/run/dovecot/master.pid         \
    --exclude=/local/etc/macports/macports.conf         \
    $SOURCE/opt/ $TARGET/opt/ &

# stow
echo $SOURCE/usr/local/ '->' $TARGET/usr/local/
volcopy $FLAGS --delete --rsync-path="$RSYNC"           \
    $SOURCE/usr/local/ $TARGET/usr/local/ &

# Applications
echo $SOURCE/Applications/ '->' $TARGET/Applications/
volcopy $FLAGS --delete --rsync-path="$RSYNC"           \
    --include=/MacPorts/                                \
    --include=/Misc/                                    \
    --exclude=/*/                                       \
    $SOURCE/Applications/ $TARGET/Applications/ &

# Wait for the parallel synchronization tasks to complete
wait

rsync -aE --rsync-path=/usr/bin/rsync --delete                          \
    $SHOME/Library/Containers/com.agilebits.onepassword-osx-helper/     \
    $THOME/Library/Containers/com.agilebits.onepassword-osx-helper/     \

exit 0

### pushme/pullyou ends here
