#!/usr/bin/env runhaskell

{-# LANGUAGE QuasiQuotes #-}

import Control.Monad
import Data.String.Here
import System.IO

lists :: [(String, String)]
lists =
    [ ("list.bahai.tarjuman",           "tarikh@bahai-library.com")
    , ("list.bahai.tarjuman",           "tarjuman@bahai-library.com")
    , ("list.coq",                      "coq-club@inria.fr")
    , ("list.coq.deepspec",             "deepspec@lists.cs.princeton.edu")
    , ("list.coq.devel",                "coqdev@inria.fr")
    , ("list.coq.fiat",                 "fiat@lists.csail.mit.edu")
    , ("list.coq.ssreflect",            "ssreflect@msr-inria.inria.fr")
    , ("list.emacs.announce",           "info-gnu-emacs@gnu.org")
    , ("list.emacs.bugs",               "@debbugs.gnu.org")
    , ("list.emacs.bugs",               "bug-gnu-emacs@gnu.org")
    , ("list.emacs.manual",             "emacs-manual-bugs@gnu.org")
    , ("list.emacs.bugs.tracker",       "emacs-bug-tracker@gnu.org")
    , ("list.emacs.bugs.tracker",       "tracker@debbugs.gnu.org")
    , ("list.emacs.buildstatus",        "emacs-buildstatus@gnu.org")
    , ("list.emacs.devel.owner",        "emacs-devel-owner@gnu.org")
    , ("list.emacs.devel",              "emacs-devel@gnu.org")
    , ("list.emacs.diffs",              "emacs-diffs@gnu.org")
    , ("list.emacs.elpa.diffs",         "emacs-elpa-diffs@gnu.org")
    , ("list.emacs.help",               "help-gnu-emacs@gnu.org")
    , ("list.emacs.orgmode",            "emacs-orgmode@gnu.org")
    , ("list.emacs.proofgeneral",       "proofgeneral-devel@inf.ed.ac.uk")
    , ("list.emacs.sources",            "gnu-emacs-sources@gnu.org")
    , ("list.emacs.tangents",           "emacs-tangents@gnu.org")
    , ("list.emacs.windows",            "help-emacs-windows@gnu.org")
    , ("list.dfinity.confluence",       "confluence@dfinity.atlassian.net")
    , ("list.dfinity.jira",             "jira@dfinity.atlassian.net")
    , ("list.dfinity.github",           "dev@dfinity-lab.github.com")
    , ("list.dfinity.misc",             "no-reply@greenhouse.io")
    , ("list.dfinity.misc",             "calendar-notification@google.com")
    , ("list.github",                   "github.com")
    , ("list.gnu.debbugs",              "help-debbugs@gnu.org")
    , ("list.gnu.prog",                 "gnu-prog@gnu.org")
    , ("list.gnu.prog.discuss",         "gnu-prog-discuss@gnu.org")
    , ("list.gsoc.mentors",             "google-summer-of-code-mentors-list@googlegroups.com")
    , ("list.haskell.admin",            "admin@haskell.org")
    , ("list.haskell.announce",         "haskell@haskell.org")
    , ("list.haskell.beginners",        "beginners@haskell.org")
    , ("list.haskell.cabal",            "cabal-devel@haskell.org")
    , ("list.haskell.cafe",             "haskell-cafe@haskell.org")
    , ("list.haskell.cloud",            "cloud-haskell-developers@googlegroups.com")
    , ("list.haskell.commercial",       "commercialhaskell@googlegroups.com")
    , ("list.haskell.committee",        "committee@haskell.org")
    , ("list.haskell.community",        "haskell-community@haskell.org")
    , ("list.haskell.ghc",              "glasgow-haskell-users@haskell.org")
    , ("list.haskell.ghc.devel",        "ghc-devs@haskell.org")
    , ("list.haskell.ghc.linker",       "ghc-linker@googlegroups.com")
    , ("list.haskell.gsoc",             "no-reply@google-melange.appspotmail.com")
    , ("list.haskell.hackage-trustees", "hackage-trustees@noreply.github.com")
    , ("list.haskell.infrastructure",   "haskell-infrastructure@community.galois.com")
    , ("list.haskell.libraries",        "core-libraries-committee@haskell.org")
    , ("list.haskell.libraries",        "libraries@haskell.org")
    , ("list.haskell.pipes",            "haskell-pipes@googlegroups.com")
    , ("list.haskell.prime",            "haskell-prime@haskell.org")
    , ("list.haskell.prime",            "rfcs@haskell.github.com")
    , ("list.hott",                     "hott-cafe@googlegroups.com")
    , ("list.idris.devel",              "idris-lang@googlegroups.com")
    , ("list.ledger.devel",             "ledger-cli@googlegroups.com")
    , ("list.shake.devel",              "shake-build-system@googlegroups.com")
    , ("list.types",                    "types-list@lists.seas.upenn.edu")
    ]

main :: IO ()
main =
    withFile "dovecot.sieve" WriteMode $ \dovecot ->
        withFile "fastmail.sieve" WriteMode $ \fastmail -> do
            forM_ lists $ \(list, addr) -> do
                hPutStr dovecot [i|
elsif anyof (header :contains ["List-Id","List-Post"]
            "<${subst '@' '.' addr}>",
          header :contains ["Sender","From","To","Reply-To","Cc"]
            "${addr}") {
  fileinto "${list}";
}
|]
                hPutStr fastmail [i|if anyof (header :contains ["List-Id","List-Post"]
            "<${subst '@' '.' addr}>",
          header :contains ["Sender","From","To","Reply-To","Cc"]
            "${addr}") {
  fileinto "INBOX.Lists";
}
els|]
            hPutStr fastmail [i|e { fileinto "INBOX"; }
|]
  where
    subst _ _ [] = []
    subst a b (x:xs) | x == a = b:subst a b xs
    subst a b (x:xs)          = x:subst a b xs
